#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX_LEN 255

/**************************************************
 *
 * 单词结构体
 *
***************************************************/
typedef struct word_Node {
    char word[MAX_LEN];
    struct word_Node *next;
    int w_len;
} word_Node, *word_LinkList;

/**************************************************
 *
 * 创建一个利用尾插法的单链表
 *
***************************************************/
void createWordLinkList(word_LinkList *wl);


/**************************************************
 * 功能利用尾插法插入整个单词
 *
**************************************************/
void insert(word_LinkList l, const char *w, int len);



/****************************************
 *
 * 清除链表所有的节点并，释放空间
 *
*****************************************/ 
void clear_WordLinkList(word_LinkList *l);


/**************************************************
 *
 * 删除整个链表
 *
***************************************************/
void delete_WordLinkList(word_LinkList *l);

/**************************************************
 *
 *读取一个节点的单词，并返回下一个节点的指针
 *
***************************************************/
word_Node * readWord(word_Node *cur, char arr[], int *len);
/******************************************
 *
 *判断一个字符是否在一个字符串中
 *
 *******************************************/
int isInArray(char c, char *arr, int len);

/**************************************************
 *
 * 输出整个链表记录的单词
 *
***************************************************/
void printWordLinkList(word_LinkList l);

/**************************************************
 *
 * 返回整个链表的长度
 *
***************************************************/
int len_WordLinkList(word_LinkList l);

/**************************************************
 *
 * 读入一个字符串，并将单词分离，插入单链表
 *
***************************************************/
void readString(word_LinkList l, char *arr, int len_arr);
